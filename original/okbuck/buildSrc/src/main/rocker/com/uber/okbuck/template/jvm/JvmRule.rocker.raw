@import java.util.Collection
@import java.util.Map
@args (
Collection srcs,
Collection exts,
Collection resources,
Collection excludes,
String sourceCompatibility,
String targetCompatibility,
String mavenCoords,
Collection testTargets,
Collection apPlugins,
Collection aptDeps,
Collection providedDeps,
Collection libDeps,
Map options,
Collection jvmArgs,
Map env,
RockerBody content
)
@if (valid(libDeps)) {
lib_deps = [
@for (libDep : sorted(libDeps)) {
    '@libDep',
}
]

} else {
lib_deps = []

}
@com.uber.okbuck.template.base.BuckRule.template() -> {
@if (valid(srcs)) {
    srcs = glob([
    @for (src : sorted(srcs)) {
    @for (ext : sorted(exts)) {
        '@src/**/*.@ext',
    }
    }
@if (valid(excludes)) {
    ], exclude = [
    @for (exclude : sorted(excludes)) {
        '@exclude',
    }
}
    ]),
}
    source = '@sourceCompatibility',
    target = '@targetCompatibility',
@if (valid(resources)) {
    resources = glob([
    @for (res : sorted(resources)) {
        '@res/**',
    }
    ]),
    resources_root = '@resources.iterator().next()',
    unbundled_resources_root = '@resources.iterator().next()',
}
@if (valid(testTargets)) {
    tests = [
    @for (testTarget : testTargets) {
        '@testTarget',
    }
    ],
}
@if (valid(apPlugins)) {
    plugins = [
    @for (apPlugin : sorted(apPlugins)) {
        '@apPlugin',
    }
    ],
}
@if (valid(aptDeps)) {
    annotation_processor_deps = [
    @for (aptDep : sorted(aptDeps)) {
        '@aptDep',
    }
    ],
}
@if (valid(providedDeps)) {
    provided_deps = [
    @for (providedDep : sorted(providedDeps)) {
        '@providedDep',
    }
    ],
}
@if (valid(options)) {
    @for ((key, val) : options) {
    @if (valid((Collection) val)) {
    @key = [
    @for (value : (Collection) val) {
        '@value',
    }
    ],
    }
    }
}
@if (valid(jvmArgs)) {
    vm_args = [
    @for (jvmArg : jvmArgs) {
        '@jvmArg',
    }
    ],
}
@if (valid(mavenCoords)) {
    maven_coords = '@mavenCoords',
}
@if (valid(env)) {
    env = @{
    @for ((key, val) : env) {
        '@key': '@val',
    }
    @},
}
@if (valid(libDeps)) {
    deps = lib_deps,
}
@if (content != null) {
@content
}
}
