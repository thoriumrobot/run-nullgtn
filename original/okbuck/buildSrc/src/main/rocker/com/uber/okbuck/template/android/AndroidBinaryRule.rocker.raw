@import java.util.Collection
@import java.util.Map
@args (
String manifestSkeleton,
String keystore,
String preprocessJavaClassesBash,
String proguardConfig,
boolean debuggable,
int linearAllocHardLimit,
Collection primaryDexPatterns,
Collection cpuFilters,
Collection preprocessJavaClassesDeps,
Collection testTargets,
Map placeholders,
boolean includesVectorDrawables,
boolean exopackage,
boolean minifyEnabled,
boolean multidexEnabled,
)
@com.uber.okbuck.template.base.BuckRule.template() -> {
    manifest_skeleton = '@manifestSkeleton',
    keystore = '@keystore',
    dex_tool = 'd8',
@if (exopackage) {
    exopackage_modes = ['secondary_dex'],
}
@if (multidexEnabled) {
    use_split_dex = True,
    linear_alloc_hard_limit = @linearAllocHardLimit,
@if(valid(primaryDexPatterns)) {
    primary_dex_patterns = [
    @for (primaryDexPattern : primaryDexPatterns) {
        '@primaryDexPattern',
    }
    ],
}
}
@if (valid(preprocessJavaClassesBash)) {
    preprocess_java_classes_bash = '@preprocessJavaClassesBash',
@if (valid(preprocessJavaClassesDeps)) {
    preprocess_java_classes_deps = [
    @for (preprocessJavaClassesDep : sorted(preprocessJavaClassesDeps)) {
        '@preprocessJavaClassesDep',
    }
    ],
}
}
@if (valid(cpuFilters)) {
    cpu_filters = [
    @for (cpuFilter : sorted(cpuFilters)) {
        '@cpuFilter',
    }
    ],
}
@if (minifyEnabled) {
    android_sdk_proguard_config = 'none',
    proguard_config = '@proguardConfig',
}
@if (debuggable) {
    package_type = 'debug',
} else {
    package_type = 'release',
}
@if (includesVectorDrawables) {
    includes_vector_drawables = True,
}
@if (valid(placeholders)) {
    manifest_entries = @{
        'placeholders': @{
        @for ((key, val) : placeholders) {
            '@key': '@val',
        }
        @},
    @},
}
@if (valid(testTargets)) {
    tests = [
    @for (testTarget : testTargets) {
        '@testTarget',
    }
    ],
}
}
