@import java.util.Collection
@import java.util.Map
@import com.android.builder.model.LintOptions
@args (
Collection srcs,
Collection exts,
Collection resources,
Collection resDirs,
Collection excludes,
String sourceCompatibility,
String targetCompatibility,
String proguardConfig,
Collection testTargets,
Collection apPlugins,
Collection aptDeps,
Collection providedDeps,
Collection libDeps,
Map options,
Collection jvmArgs,
Map env,
Collection exportedDeps,
Collection extraKotlincArgs,
String language,
String manifest,
String robolectricManifest,
String runtimeDependency,
boolean generateR2,
boolean disableLint,
boolean disableLintTemplate,
Collection customLints,
String lintConfigXml,
LintOptions lintOptions
)
@com.uber.okbuck.template.jvm.JvmRule.template(
srcs,
exts,
resources,
excludes,
sourceCompatibility,
targetCompatibility,
"",
testTargets,
apPlugins,
aptDeps,
providedDeps,
libDeps,
options,
jvmArgs,
env
) -> {
@if (valid(manifest)) {
    manifest = '@manifest',
}
@if (valid(robolectricManifest)) {
    robolectric_manifest = '@robolectricManifest',
}
@if (valid(exportedDeps)) {
    exported_deps = [
    @for (exportedDep : sorted(exportedDeps)) {
        '@exportedDep',
    }
    ],
}
@if (generateR2) {
    final_r_name = 'R2',
}
@if (valid(proguardConfig)) {
    proguard_config = '@proguardConfig',
}
@if (valid(runtimeDependency)) {
    force_final_resource_ids = False,
    robolectric_runtime_dependency = '@runtimeDependency',
}
@if (valid(language)) {
    language = '@language',
}
@if (valid(extraKotlincArgs)) {
    extra_kotlinc_arguments = [
    @for (extraKotlincArg : extraKotlincArgs) {
        '@extraKotlincArg',
    }
    ],
}
@if (!disableLintTemplate) {
@if (!disableLint) {
@if (valid(srcs)) {
    lint_src_dirs = [
    @for (src : sorted(srcs)) {
        '@src',
    }
    ],
@if (valid(resDirs)) {
    lint_res_dirs = [
    @for (resDir : sorted(resDirs)) {
        '@resDir',
    }
    ],
}
@if (valid(customLints)) {
    custom_lints = [
    @for (customLint : sorted(customLints)) {
        '@customLint',
    }
    ],
}
@if (lintOptions != null) {
    lint_options = [
@if (lintOptions.isAbortOnError()) {
        '--exitcode',
}
@if (lintOptions.isCheckAllWarnings()) {
        '-Wall',
}
@if (lintOptions.isIgnoreWarnings()) {
        '--nowarn',
}
@if (lintOptions.isWarningsAsErrors()) {
        '-Werror',
}
@if (lintOptions.isNoLines()) {
        '--nolines',
}
@if (valid(lintOptions.getDisable())) {
        '--disable @(String.join(",", lintOptions.getDisable()))',
}
@if (valid(lintOptions.getEnable())) {
        '--enable @(String.join(",", lintOptions.getEnable()))',
}
@if (valid(lintConfigXml)) {
        '--config $(location @(lintConfigXml))',
}
    ],
}
}
} else {
    disable_lint = True,
}
}
}
